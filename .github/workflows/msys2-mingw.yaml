# SPDX-FileCopyrightText: 2025 ORDeC contributors
# SPDX-License-Identifier: Apache-2.0

name: MSYS2/MinGW Build and Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  msys2-build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-numpy
            mingw-w64-x86_64-python-scipy
            mingw-w64-x86_64-nodejs
            mingw-w64-x86_64-npm
            mingw-w64-x86_64-readline
            mingw-w64-x86_64-ncurses
            automake
            autoconf
            libtool
            bison
            flex
            git
            wget
            tar
            unzip
            zstd
            base-devel

      - name: Set up environment variables
        run: |
          echo "ORDEC_BUILD_DIR=$PWD/ordec-build" >> $GITHUB_ENV
          echo "ORDEC_PDK_SKY130A=$PWD/skywater/sky130A" >> $GITHUB_ENV
          echo "ORDEC_PDK_SKY130B=$PWD/skywater/sky130B" >> $GITHUB_ENV
          echo "ORDEC_PDK_IHP_SG13G2=$PWD/IHP-Open-PDK/ihp-sg13g2" >> $GITHUB_ENV

      - name: Download and build ngspice
        run: |
          echo "Downloading ngspice..."
          wget -q https://netcologne.dl.sourceforge.net/project/ngspice/ng-spice-rework/44.2/ngspice-44.2.tar.gz
          echo "e7dadfb7bd5474fd22409c1e5a67acdec19f77e597df68e17c5549bc1390d7fd ngspice-44.2.tar.gz" | sha256sum -c
          tar xf ngspice-44.2.tar.gz
          rm ngspice-44.2.tar.gz
          
          echo "Building ngspice..."
          cd ngspice-44.2
          ./autogen.sh
          ngspice_common_args="--disable-debug --without-x --enable-xspice --disable-cider --enable-openmp --enable-osdi"
          ./configure --prefix=$PWD/../ngspice/min ${ngspice_common_args} --with-readline=no --with-editline=no
          make -j$(nproc)
          make install
          
          # Build shared library version
          make clean
          ./configure --prefix=$PWD/../ngspice/shared ${ngspice_common_args} --with-ngshared --with-readline=no --with-editline=no
          make -j$(nproc)
          make install

      - name: Download OpenVAF
        run: |
          echo "Downloading OpenVAF..."
          mkdir -p openvaf
          cd openvaf
          # Note: For Windows, we would need a Windows-compatible OpenVAF binary
          # For now, downloading Linux version as placeholder - this would need
          # to be replaced with actual Windows binary when available
          wget -q https://openva.fra1.cdn.digitaloceanspaces.com/openvaf_23_5_0_linux_amd64.tar.gz
          echo "79c0e08ad948a7a9f460dc87be88b261bbd99b63a4038db3c64680189f44e4f0 openvaf_23_5_0_linux_amd64.tar.gz" | sha256sum -c
          tar xf openvaf_23_5_0_linux_amd64.tar.gz
          rm openvaf_23_5_0_linux_amd64.tar.gz
          # For MSYS2, we might need to use Wine or find a native Windows build
          echo "Warning: OpenVAF Linux binary may not work directly in MSYS2"

      - name: Download IHP-Open-PDK
        run: |
          echo "Downloading IHP-Open-PDK..."
          mkdir -p IHP-Open-PDK
          cd IHP-Open-PDK
          git init
          git remote add origin https://github.com/IHP-GmbH/IHP-Open-PDK.git
          git fetch --depth 1 origin 0854e9bcd558b68c573149038b4c95706314e2f1
          git checkout FETCH_HEAD
          rm -rf ihp-sg13g2/libs.doc ihp-sg13g2/libs.tech/openems .git

      - name: Download Skywater PDK
        run: |
          echo "Downloading Skywater PDK..."
          mkdir -p skywater
          cd skywater
          wget -q "https://github.com/efabless/volare/releases/download/sky130-fa87f8f4bbcc7255b6f0c0fb506960f531ae2392/common.tar.zst"
          echo "c7c155596a1fd1fcf6d5414dfcffcbbcf4e35b2b33160af97f4340e763c97406 common.tar.zst" | sha256sum -c
          wget -q "https://github.com/efabless/volare/releases/download/sky130-fa87f8f4bbcc7255b6f0c0fb506960f531ae2392/sky130_fd_pr.tar.zst"
          echo "41dc9098541ed3329eba4ec7f5dfd1422eb09e94b623ea1f6dc3895f9ccebf63 sky130_fd_pr.tar.zst" | sha256sum -c
          tar xf common.tar.zst
          tar xf sky130_fd_pr.tar.zst
          rm common.tar.zst sky130_fd_pr.tar.zst
          rm -rf sky130A/libs.tech/xschem sky130B/libs.tech/xschem
          rm -rf sky130A/libs.tech/openlane sky130B/libs.tech/openlane

      - name: Set up environment paths
        run: |
          export PATH="$PWD/openvaf:$PWD/ngspice/min/bin:$PATH"
          # On Windows/MSYS2, we use PATH instead of LD_LIBRARY_PATH for DLLs
          export PATH="$PWD/ngspice/shared/lib:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Compile Verilog-A models
        run: |
          echo "Compiling Verilog-A models..."
          cd IHP-Open-PDK/ihp-sg13g2/libs.tech/verilog-a/
          # Note: This step may need adjustment for Windows/MSYS2 compatibility
          if [ -f "./openvaf-compile-va.sh" ]; then
            ./openvaf-compile-va.sh
          else
            echo "Warning: openvaf-compile-va.sh not found, skipping Verilog-A compilation"
          fi

      - name: Set up Python environment
        run: |
          echo "Setting up Python environment..."
          python -m venv venv
          
          # Windows-style activation in MSYS2
          . venv/Scripts/activate
          
          # Install Python dependencies
          # Note: Some packages might need special handling on Windows
          pip install --no-cache-dir \
            pyrsistent \
            astor \
            websockets \
            lark \
            scipy \
            numpy \
            pytest \
            pytest-cov \
            build
          
          # Install selenium and inotify-simple with error handling
          # inotify-simple might not work on Windows, so we'll skip it if it fails
          pip install selenium || echo "Warning: selenium installation failed"
          pip install inotify-simple || echo "Warning: inotify-simple not available on Windows, functionality may be limited"

      - name: Install npm dependencies
        run: |
          echo "Installing npm dependencies..."
          cd web
          npm install
          npm cache clean --force

      - name: Install ORDeC in development mode
        run: |
          echo "Installing ORDeC..."
          . venv/Scripts/activate
          pip install -e .[test]

      - name: Run Python tests
        run: |
          echo "Running Python tests..."
          . venv/Scripts/activate
          
          # Set environment variables for tests
          export ORDEC_PDK_SKY130A="$PWD/skywater/sky130A"
          export ORDEC_PDK_SKY130B="$PWD/skywater/sky130B"
          export ORDEC_PDK_IHP_SG13G2="$PWD/IHP-Open-PDK/ihp-sg13g2"
          export PATH="$PWD/openvaf:$PWD/ngspice/min/bin:$PWD/ngspice/shared/lib:$PATH"
          
          # Run pytest with coverage
          pytest -v --cov-report=html:htmlcov --junit-xml=test-results.xml
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: msys2-test-results
          path: |
            test-results.xml
            htmlcov/

      - name: Build ORDeC wheel
        run: |
          echo "Building ORDeC wheel..."
          . venv/Scripts/activate
          python -m build .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msys2-build-artifacts
          path: |
            dist/
            ngspice/
            openvaf/